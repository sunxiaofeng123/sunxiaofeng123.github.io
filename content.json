{"meta":{"title":"晓峰博客","subtitle":"改变是一个循序渐进的过程。","description":"技术分享，学习。","author":"孙晓峰","url":"https://sunxiaofeng123.github.io"},"pages":[{"title":"about","date":"2018-06-28T11:51:02.000Z","updated":"2018-06-28T11:51:02.000Z","comments":true,"path":"about/index.html","permalink":"https://sunxiaofeng123.github.io/about/index.html","excerpt":"","text":""}],"posts":[{"title":"github+hexo搭建静态博客心得","slug":"hello-myblog","date":"2018-06-28T01:33:16.000Z","updated":"2018-07-01T07:39:27.000Z","comments":true,"path":"2018/06/28/hello-myblog/","link":"","permalink":"https://sunxiaofeng123.github.io/2018/06/28/hello-myblog/","excerpt":"","text":"一直想搭建一个属于自己的博客，一直没有时间，后来听朋友说使用github+hexo搭建一个静态博客，效果很好，正好自己也一直在用github。昨天正式开始搭建，现在只是把博客的基本架构搭建完成，以后每天慢慢完善，顺便写一些学习到技术的心得，共同学习进步，也提升一下自己写作能力。","categories":[],"tags":[{"name":"博客","slug":"博客","permalink":"https://sunxiaofeng123.github.io/tags/博客/"}],"keywords":[]},{"title":"PHP设计模式之抽象工厂模式","slug":"hello-world","date":"2018-06-27T15:12:42.000Z","updated":"2018-07-01T08:13:48.000Z","comments":true,"path":"2018/06/27/hello-world/","link":"","permalink":"https://sunxiaofeng123.github.io/2018/06/27/hello-world/","excerpt":"","text":"在不指定具体类的情况下创建一系列相关或依赖对象。 通常创建的类都实现相同的接口。 抽象工厂的客户并不关心这些对象是如何创建的，它只是知道它们是如何一起运行的。 代码展示AbstractFactory.php123456789101112namespace DesignPatters\\Creational\\AbstruactFactory;/** * 在这种情况下，抽象工厂是创建一些组件的契约 * 在web中， 有两种呈现文本的方式： HTML和JSON / abstract class AbstractFactory &#123; abstract public function cteateText(string $content): Text; &#125; JsonFacory.php123456789namespace DesignPatterns\\Creational\\AbstractFactory;class JsonFactory extends AbstractFactory&#123; public function create(string $content):Text &#123; return new JsonText($content) &#125;&#125; HtmlFactory.php123456789namespace DesignPatterns\\Creational\\AbstractFactory;class HtmlFactory extends AbstractFaxtory&#123; public function cteateText(string $content): Text &#123; return new HtmlText($content); &#125;&#125; Text.php12345678910111213141516namespace DesignPatterns\\Creational\\AbstractFactory;abstract class Text&#123; /** *@var string * / private $text; public function __construct(string $text) &#123; $this-&gt;text = $text; &#125; &#125; JsonText.php123456namespace DesignPatterns\\Creational\\AbstractFactory;class JsonText extends Text&#123; //你的逻辑代码&#125; HtmlText.php123456namespace DesignPatterns\\Creational\\AbstractFactory;class HtmlText extends Text&#123; //你的逻辑代码&#125; Tests\\AbstractFactoryTest.php1234567891011121314151617181920212223242526namespace DesignPatterns\\Creational\\AbstractFactory\\Tests;use DesignPatterns\\Creational\\AbstractFactory\\HtmlFactory;use DesignPatterns\\Creational\\AbstractFactory\\HtmlText;use DesignPatterns\\Creational\\AbstractFactory\\JsonFactory;use DesignPatterns\\Creational\\AbstractFactory\\JsonText;use PHPUnit\\Framework\\TestCase;class AbstractFactoryTest extend TestCase&#123; public function testCanCreateHtmlText() &#123; $factory = new HtmlFactory(); $text = $factory-&gt;createText(&apos;foobar&apos;); $this-&gt;assertInstanceOf(HtmlText::class, $text); &#125; public function testCanCreateJsonText() &#123; $factory = new JsonFactory(); $texgt = $factory-&gt;cteateText(&apos;foorbar&apos;); $this-&gt;assertInstanceOf(JsonText::class, $text); &#125;&#125; 内容转自laravel-china 社区。更多内容: laravel-china","categories":[],"tags":[],"keywords":[]}]}