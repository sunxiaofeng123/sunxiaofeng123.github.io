{"meta":{"title":"雁过留声","subtitle":"改变，是一个循序渐进的过程。","description":"技术分享，学习。","author":"孙晓峰","url":"https://sunxiaofeng123.github.io"},"pages":[{"title":"about","date":"2018-06-28T11:51:02.000Z","updated":"2018-06-28T11:51:02.000Z","comments":true,"path":"about/index.html","permalink":"https://sunxiaofeng123.github.io/about/index.html","excerpt":"","text":""}],"posts":[{"title":"PHP7个常用算法","slug":"php-7suanfa","date":"2018-07-08T12:46:22.000Z","updated":"2018-07-08T13:07:08.000Z","comments":true,"path":"2018/07/08/php-7suanfa/","link":"","permalink":"https://sunxiaofeng123.github.io/2018/07/08/php-7suanfa/","excerpt":"","text":"下面是7个PHP常用的算法，总结一下笔记，以便今后使用。 1、冒泡排序12345678910111213141516function bubble_sort($arr)&#123; $n = count($arr); for($i = 0; $i&lt;$n-1; $i++) &#123; for($j = $i+1; $j&lt;$n; $j++) &#123; if($arr[$j] &lt; $arr[$i]) &#123; $temp = $arr[$j]; $arr[$i]=$arr[$j]; $arr[$j]=$temp; &#125; &#125; &#125; return $arr;&#125; 2、归并排序12345678910111213141516171819202122232425262728293031function merge(&amp;$arr, $left, $mid, $right) &#123; $i = $left; $j = $mid + 1; $k = 0; $temp = array(); while ($i &lt;= $mid &amp;&amp; $j &lt;= $right) &#123; if ($arr[$i] &lt;= $arr[$j]) $temp[$k++] = $arr[$i++]; else $temp[$k++] = $arr[$j++]; &#125; while ($i &lt;= $mid) $temp[$k++] = $arr[$i++]; while ($j &lt;= $right) $temp[$k++] = $arr[$j++]; for ($i = $left, $j = 0; $i &lt;= $right; $i++, $j++) $arr[$i] = $temp[$j];&#125; function merge_sort(&amp;$arr, $left, $right)&#123; if ($left &lt; $right) &#123; $mid = floor(($left + $right) / 2); merge_sort($arr, $left, $mid); merge_sort($arr, $mid + 1, $right); merge($arr, $left, $mid, $right); &#125;&#125; 3、二分查找-递归1234567891011121314function bin_search($arr,$low,$high,$value) &#123; if($low &gt; $high) return false; else &#123; $mid = floor(($low+$high)/2); if($value == $arr[$mid]) return $mid; elseif($value &lt; $arr[$mid]) return bin_search($arr,$low,$mid-1,$value); else return bin_search($arr,$mid+1,$high,$value); &#125;&#125; 4、二分查找-非递归12345678910111213function bin_search($arr,$low,$high,$value) &#123; while($low &lt;= $high) &#123; $mid=floor(($low+$high)/2); if($value == $arr[$mid]) return $mid; elseif($value &lt; $arr[$mid]) $high = $mid-1; else $low = $mid+1; &#125; return false;&#125; 5、快速排序1234567891011121314151617181920function quick_sort($arr) &#123; $n = count($arr); if($n &lt;= 1) return $arr; $key = $arr[0]; $left_arr = array(); $right_arr =a rray(); for($i=1; $i &lt; $n; $i++) &#123; if($arr[$i] &lt;= $key) $left_arr[] = arr[$i]; else $right_arr[] = $arr[$i]; &#125; $left_arr = quick_sort($left_arr); $right_arr = quick_sort($right_arr); return array_merge($left_arr,array($key),$right_arr);&#125; 6、选择排序123456789101112131415161718function select_sort($arr) &#123; $n = count($arr); for($i=0; $i &lt; $n; $i++) &#123; $k = $i; for($j = $i+1; $j &lt; $n; $j++) &#123; if($arr[$j] &lt; $arr[$k]) $k = $j; &#125; if($k != $i) &#123; $temp = $arr[$i]; $arr[$i] = $arr[$k]; $arr[$k] = $temp; &#125; &#125; return $arr;&#125; 7、选择排序1234567891011121314151617function insert_sort($arr) &#123; $n = count($arr); for($i=1; $i &lt; $n; $i++) &#123; $tmp = $arr[$i]; $j = $i-1; while($arr[$j] &gt; $tmp) &#123; $arr[$j+1] = $arr[$j]; $arr[$j] = $tmp; $j--; if($j &lt; 0) break; &#125; &#125; return $arr;&#125;","categories":[],"tags":[{"name":"php","slug":"php","permalink":"https://sunxiaofeng123.github.io/tags/php/"}],"keywords":[]},{"title":"laravel之数据填充笔记（5.5）","slug":"laravel-1","date":"2018-07-07T13:26:00.000Z","updated":"2018-07-07T14:23:59.000Z","comments":true,"path":"2018/07/07/laravel-1/","link":"","permalink":"https://sunxiaofeng123.github.io/2018/07/07/laravel-1/","excerpt":"","text":"在实际的项目开发过程中，我们经常会用到一些假数据来对数据库进行填充以方便调试程序，原始的做法是手工一个个在数据库中创建，或者从队友的机器那导出数据填充到开发机器中。Laravel 提供了一套更加现代化、非常简单易用的数据填充方案。1、对要生成假数据的模型指定字段进行赋值-模型工厂；2、批量生成假数据模型-数据填充； 模型工厂Laravel默认为我们集成Faker扩展包，使用该扩展包可以让我很方便生成一些数据。 示例如下： 1234567891011121314// 使用 factory 来创建一个 Faker\\Generator 实例$faker = Faker\\Factory::create();// 生成用户名$faker-&gt;name; // &quot;Janie Roob&quot;// 生成安全邮箱$faker-&gt;safeEmail; // &quot;claire.wuckert@example.net&quot;// 生成随机日期$faker-&gt;date // &quot;2011-02-10&quot;// 生成随机时间$faker-&gt;time // &quot;13:03:55&quot; 我们使用UserFactory生成一些用户信息数据，为示例。database/factories/UserFactory.php 1234567891011121314151617181920212223242526use Faker\\Generator as Faker;/*|--------------------------------------------------------------------------| Model Factories|--------------------------------------------------------------------------|| This directory should contain each of the model factory definitions for| your application. Factories provide a convenient way to generate new| model instances for testing / seeding your application&apos;s database.|*/$factory-&gt;define(App\\Models\\User::class, function (Faker $faker) &#123; $date_time = $faker-&gt;date . &apos; &apos; . $faker-&gt;time; static $password; return [ &apos;name&apos; =&gt; $faker-&gt;name, &apos;email&apos; =&gt; $faker-&gt;safeEmail, &apos;password&apos; =&gt; $password ?: $password = bcrypt(&apos;secret&apos;), &apos;remember_token&apos; =&gt; str_random(10), &apos;created_at&apos; =&gt; $date_time, &apos;updated_at&apos; =&gt; $date_time, ];&#125;); define 定义一个指定的数据模型User的模型工厂。define方法接受两个参数，第一个参数为指定的Eloquent的模型类，第二个参数为一个闭包函数，该闭包函数接收一个Faker PHP函数库的实例，让我们可以在函数内部使用Faker方法来生成假数据并为模型的指定字段赋值。 数据填充我们使用Seeder类来给数据填充测试数据。所有的Seeder类都放在database/seeds目录下，文件名需要按照驼峰式来命名，且严格遵守大小鞋规范。laravel默认为我们定了一个DatabaseSeeder类，我们可以在该类中使用call方法来运行其他的Seeder类，以此控制数据填充的顺序。我们可以使用下面命令生成一个UserTableSeeder文件用于填充用户假数据。 1php artisan make:seeder UserTableSeeder 现在让我们使用该方法来创建50个假用户。database/seeds/UsersTableSeeder.php 12345678910111213141516171819202122use Illuminate\\Database\\Seeder;use App\\Models\\User;class UsersTableSeeder extends Seeder&#123; /** * Run the database seeds. * * @return void */ public function run() &#123; $users = factory(User::class)-&gt;times(50)-&gt;make(); User::insert($users-&gt;makeVisible([&apos;password&apos;, &apos;remember_token&apos;])-&gt;toArray()); $user = User::find(1); $user-&gt;name = &apos;feng&apos;; $user-&gt;email = &apos;feng@qq.com&apos;; $user-&gt;password = bcrypt(&apos;password&apos;); $user-&gt;save(); &#125;&#125; times 接收一个参数用指定要创建的模型数量，make方法调用后将为模型创建一个集合。makeVisible方法临时显示User模型里指定的隐藏的属性$hidden，接着我们使用insert 方法将生成假用户数据插入到数据库中，最后我们还对第一个用户信息进行了更新，用于登陆此账号。 接下来我们需要调用DatabaseSeeder 中调用call方法来指定我们要运行假数据填充文件。 database/seeds/DatabaseSeeder.php 12345678910111213141516171819use Illuminate\\Database\\Seeder;use Illuminate\\Database\\Eloquent\\Model;class DatabaseSeeder extends Seeder&#123; /** * Run the database seeds. * * @return void */ public function run() &#123; Model::unguard(); $this-&gt;call(UsersTableSeeder::class); Model::reguard(); &#125;&#125; 在运行生成假数据命令之前，我们需要使用migrate:refresh命令来重置数据库，之后再使用db:seed执行数据填充。 12php artisan migrate:refreshphp artisan db:seed 如果我们单独指定执行UserTableSeeder数据库填充文件： 12php artisan migrate:refreshphp artisan db:seed --class=UserTableSeeder 也可以使用下面一条命令来同时完成数据库的重置和填充操作： 1php artisan migrate:refresh --seed","categories":[],"tags":[{"name":"laravel","slug":"laravel","permalink":"https://sunxiaofeng123.github.io/tags/laravel/"}],"keywords":[]},{"title":"PHP设计模式之抽象工厂模式","slug":"hello-world","date":"2018-07-01T01:33:16.000Z","updated":"2018-07-02T06:53:06.000Z","comments":true,"path":"2018/07/01/hello-world/","link":"","permalink":"https://sunxiaofeng123.github.io/2018/07/01/hello-world/","excerpt":"","text":"在不指定具体类的情况下创建一系列相关或依赖对象。 通常创建的类都实现相同的接口。 抽象工厂的客户并不关心这些对象是如何创建的，它只是知道它们是如何一起运行的。 代码展示AbstractFactory.php123456789101112namespace DesignPatters\\Creational\\AbstruactFactory;/** * 在这种情况下，抽象工厂是创建一些组件的契约 * 在web中， 有两种呈现文本的方式： HTML和JSON / abstract class AbstractFactory &#123; abstract public function cteateText(string $content): Text; &#125; JsonFacory.php123456789namespace DesignPatterns\\Creational\\AbstractFactory;class JsonFactory extends AbstractFactory&#123; public function create(string $content):Text &#123; return new JsonText($content) &#125;&#125; HtmlFactory.php123456789namespace DesignPatterns\\Creational\\AbstractFactory;class HtmlFactory extends AbstractFaxtory&#123; public function cteateText(string $content): Text &#123; return new HtmlText($content); &#125;&#125; Text.php12345678910111213141516namespace DesignPatterns\\Creational\\AbstractFactory;abstract class Text&#123; /** *@var string * / private $text; public function __construct(string $text) &#123; $this-&gt;text = $text; &#125; &#125; JsonText.php123456namespace DesignPatterns\\Creational\\AbstractFactory;class JsonText extends Text&#123; //你的逻辑代码&#125; HtmlText.php123456namespace DesignPatterns\\Creational\\AbstractFactory;class HtmlText extends Text&#123; //你的逻辑代码&#125; Tests\\AbstractFactoryTest.php1234567891011121314151617181920212223242526namespace DesignPatterns\\Creational\\AbstractFactory\\Tests;use DesignPatterns\\Creational\\AbstractFactory\\HtmlFactory;use DesignPatterns\\Creational\\AbstractFactory\\HtmlText;use DesignPatterns\\Creational\\AbstractFactory\\JsonFactory;use DesignPatterns\\Creational\\AbstractFactory\\JsonText;use PHPUnit\\Framework\\TestCase;class AbstractFactoryTest extend TestCase&#123; public function testCanCreateHtmlText() &#123; $factory = new HtmlFactory(); $text = $factory-&gt;createText(&apos;foobar&apos;); $this-&gt;assertInstanceOf(HtmlText::class, $text); &#125; public function testCanCreateJsonText() &#123; $factory = new JsonFactory(); $texgt = $factory-&gt;cteateText(&apos;foorbar&apos;); $this-&gt;assertInstanceOf(JsonText::class, $text); &#125;&#125; 内容转自laravel-china 社区。更多内容: laravel-china","categories":[],"tags":[{"name":"php","slug":"php","permalink":"https://sunxiaofeng123.github.io/tags/php/"}],"keywords":[]},{"title":"github+hexo搭建静态博客心得","slug":"hello-myblog","date":"2018-06-28T01:33:16.000Z","updated":"2018-07-01T07:39:27.000Z","comments":true,"path":"2018/06/28/hello-myblog/","link":"","permalink":"https://sunxiaofeng123.github.io/2018/06/28/hello-myblog/","excerpt":"","text":"一直想搭建一个属于自己的博客，一直没有时间，后来听朋友说使用github+hexo搭建一个静态博客，效果很好，正好自己也一直在用github。昨天正式开始搭建，现在只是把博客的基本架构搭建完成，以后每天慢慢完善，顺便写一些学习到技术的心得，共同学习进步，也提升一下自己写作能力。","categories":[],"tags":[{"name":"博客","slug":"博客","permalink":"https://sunxiaofeng123.github.io/tags/博客/"}],"keywords":[]}]}