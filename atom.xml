<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>晓峰博客</title>
  
  <subtitle>改变是一个循序渐进的过程。</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://sunxiaofeng123.github.io/"/>
  <updated>2018-07-01T07:39:27.000Z</updated>
  <id>https://sunxiaofeng123.github.io/</id>
  
  <author>
    <name>孙晓峰</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>github+hexo搭建静态博客心得</title>
    <link href="https://sunxiaofeng123.github.io/2018/06/28/hello-myblog/"/>
    <id>https://sunxiaofeng123.github.io/2018/06/28/hello-myblog/</id>
    <published>2018-06-28T01:33:16.000Z</published>
    <updated>2018-07-01T07:39:27.000Z</updated>
    
    <content type="html"><![CDATA[<p>一直想搭建一个属于自己的博客，一直没有时间，后来听朋友说使用github+hexo搭建一个静态博客，效果很好，正好自己也一直在用github。昨天正式开始搭建，现在只是把博客的基本架构搭建完成，以后每天慢慢完善，顺便写一些学习到技术的心得，共同学习进步，也提升一下自己写作能力。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;一直想搭建一个属于自己的博客，一直没有时间，后来听朋友说使用github+hexo搭建一个静态博客，效果很好，正好自己也一直在用github。昨天正式开始搭建，现在只是把博客的基本架构搭建完成，以后每天慢慢完善，顺便写一些学习到技术的心得，共同学习进步，也提升一下自己写作能
      
    
    </summary>
    
    
      <category term="博客" scheme="https://sunxiaofeng123.github.io/tags/%E5%8D%9A%E5%AE%A2/"/>
    
  </entry>
  
  <entry>
    <title>PHP设计模式之抽象工厂模式</title>
    <link href="https://sunxiaofeng123.github.io/2018/06/27/hello-world/"/>
    <id>https://sunxiaofeng123.github.io/2018/06/27/hello-world/</id>
    <published>2018-06-27T15:12:42.000Z</published>
    <updated>2018-07-01T08:13:48.000Z</updated>
    
    <content type="html"><![CDATA[<p>在不指定具体类的情况下创建一系列相关或依赖对象。 通常创建的类都实现相同的接口。 抽象工厂的客户并不关心这些对象是如何创建的，它只是知道它们是如何一起运行的。</p><h2 id="代码展示"><a href="#代码展示" class="headerlink" title="代码展示"></a>代码展示</h2><h3 id="AbstractFactory-php"><a href="#AbstractFactory-php" class="headerlink" title="AbstractFactory.php"></a>AbstractFactory.php</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">namespace DesignPatters\Creational\AbstruactFactory;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 在这种情况下，抽象工厂是创建一些组件的契约</span><br><span class="line"> * 在web中， 有两种呈现文本的方式： HTML和JSON</span><br><span class="line"> /</span><br><span class="line"></span><br><span class="line"> abstract class AbstractFactory</span><br><span class="line"> &#123;</span><br><span class="line"> abstract public function cteateText(string $content): Text;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h3 id="JsonFacory-php"><a href="#JsonFacory-php" class="headerlink" title="JsonFacory.php"></a>JsonFacory.php</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">namespace DesignPatterns\Creational\AbstractFactory;</span><br><span class="line"></span><br><span class="line">class JsonFactory extends AbstractFactory</span><br><span class="line">&#123;</span><br><span class="line">public function create(string $content):Text</span><br><span class="line">&#123;</span><br><span class="line">return new JsonText($content)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="HtmlFactory-php"><a href="#HtmlFactory-php" class="headerlink" title="HtmlFactory.php"></a>HtmlFactory.php</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">namespace DesignPatterns\Creational\AbstractFactory;</span><br><span class="line"></span><br><span class="line">class HtmlFactory extends AbstractFaxtory</span><br><span class="line">&#123;</span><br><span class="line">public function cteateText(string $content): Text</span><br><span class="line">&#123;</span><br><span class="line">return new HtmlText($content);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Text-php"><a href="#Text-php" class="headerlink" title="Text.php"></a>Text.php</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">namespace DesignPatterns\Creational\AbstractFactory;</span><br><span class="line"></span><br><span class="line">abstract class Text</span><br><span class="line">&#123;</span><br><span class="line">/**</span><br><span class="line">  *@var string</span><br><span class="line">  *</span><br><span class="line">  /</span><br><span class="line"></span><br><span class="line">  private $text;</span><br><span class="line"></span><br><span class="line">  public function __construct(string $text)</span><br><span class="line">  &#123;</span><br><span class="line">  $this-&gt;text = $text;</span><br><span class="line">  &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="JsonText-php"><a href="#JsonText-php" class="headerlink" title="JsonText.php"></a>JsonText.php</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">namespace DesignPatterns\Creational\AbstractFactory;</span><br><span class="line"></span><br><span class="line">class JsonText extends Text</span><br><span class="line">&#123;</span><br><span class="line">//你的逻辑代码</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="HtmlText-php"><a href="#HtmlText-php" class="headerlink" title="HtmlText.php"></a>HtmlText.php</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">namespace DesignPatterns\Creational\AbstractFactory;</span><br><span class="line"></span><br><span class="line">class HtmlText extends Text</span><br><span class="line">&#123;</span><br><span class="line">//你的逻辑代码</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Tests-AbstractFactoryTest-php"><a href="#Tests-AbstractFactoryTest-php" class="headerlink" title="Tests\AbstractFactoryTest.php"></a>Tests\AbstractFactoryTest.php</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">namespace DesignPatterns\Creational\AbstractFactory\Tests;</span><br><span class="line"></span><br><span class="line">use DesignPatterns\Creational\AbstractFactory\HtmlFactory;</span><br><span class="line">use DesignPatterns\Creational\AbstractFactory\HtmlText;</span><br><span class="line">use DesignPatterns\Creational\AbstractFactory\JsonFactory;</span><br><span class="line">use DesignPatterns\Creational\AbstractFactory\JsonText;</span><br><span class="line">use PHPUnit\Framework\TestCase;</span><br><span class="line"></span><br><span class="line">class AbstractFactoryTest extend TestCase</span><br><span class="line">&#123;</span><br><span class="line">public function testCanCreateHtmlText()</span><br><span class="line">&#123;</span><br><span class="line">$factory = new HtmlFactory();</span><br><span class="line">$text = $factory-&gt;createText(&apos;foobar&apos;);</span><br><span class="line"></span><br><span class="line">$this-&gt;assertInstanceOf(HtmlText::class, $text);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public function testCanCreateJsonText()</span><br><span class="line">&#123;</span><br><span class="line">$factory = new JsonFactory();</span><br><span class="line">$texgt = $factory-&gt;cteateText(&apos;foorbar&apos;);</span><br><span class="line"></span><br><span class="line">$this-&gt;assertInstanceOf(JsonText::class, $text);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>内容转自laravel-china 社区。<br>更多内容: <a href="https://laravel-china.org/docs/php-design-patterns/2018/AbstractFactory/1487" target="_blank" rel="noopener">laravel-china</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在不指定具体类的情况下创建一系列相关或依赖对象。 通常创建的类都实现相同的接口。 抽象工厂的客户并不关心这些对象是如何创建的，它只是知道它们是如何一起运行的。&lt;/p&gt;
&lt;h2 id=&quot;代码展示&quot;&gt;&lt;a href=&quot;#代码展示&quot; class=&quot;headerlink&quot; titl
      
    
    </summary>
    
    
  </entry>
  
</feed>
