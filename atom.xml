<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>雁过留声</title>
  
  <subtitle>改变，是一个循序渐进的过程。</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://sunxiaofeng123.github.io/"/>
  <updated>2018-07-07T14:21:47.000Z</updated>
  <id>https://sunxiaofeng123.github.io/</id>
  
  <author>
    <name>孙晓峰</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>laravel之数据填充笔记（5.5）</title>
    <link href="https://sunxiaofeng123.github.io/2018/07/07/laravel-1/"/>
    <id>https://sunxiaofeng123.github.io/2018/07/07/laravel-1/</id>
    <published>2018-07-07T13:26:00.000Z</published>
    <updated>2018-07-07T14:21:47.000Z</updated>
    
    <content type="html"><![CDATA[<p>在实际的项目开发过程中，我们经常会用到一些假数据来对数据库进行填充以方便调试程序，原始的做法是手工一个个在数据库中创建，或者从队友的机器那导出数据填充到开发机器中。Laravel 提供了一套更加现代化、非常简单易用的数据填充方案。<br>1、对要生成假数据的模型指定字段进行赋值-模型工厂；<br>2、批量生成假数据模型-数据填充；</p><p>###模型工厂<br>Laravel默认为我们集成Faker扩展包，使用该扩展包可以让我很方便生成一些数据。</p><p>示例如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">// 使用 factory 来创建一个 Faker\Generator 实例</span><br><span class="line">$faker = Faker\Factory::create();</span><br><span class="line"></span><br><span class="line">// 生成用户名</span><br><span class="line">$faker-&gt;name; // &quot;Janie Roob&quot;</span><br><span class="line"></span><br><span class="line">// 生成安全邮箱</span><br><span class="line">$faker-&gt;safeEmail; // &quot;claire.wuckert@example.net&quot;</span><br><span class="line"></span><br><span class="line">// 生成随机日期</span><br><span class="line">$faker-&gt;date // &quot;2011-02-10&quot;</span><br><span class="line"></span><br><span class="line">// 生成随机时间</span><br><span class="line">$faker-&gt;time // &quot;13:03:55&quot;</span><br></pre></td></tr></table></figure><p>我们使用UserFactory生成一些用户信息数据，为示例。<br>database/factories/UserFactory.php</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">use Faker\Generator as Faker;</span><br><span class="line"></span><br><span class="line">/*</span><br><span class="line">|--------------------------------------------------------------------------</span><br><span class="line">| Model Factories</span><br><span class="line">|--------------------------------------------------------------------------</span><br><span class="line">|</span><br><span class="line">| This directory should contain each of the model factory definitions for</span><br><span class="line">| your application. Factories provide a convenient way to generate new</span><br><span class="line">| model instances for testing / seeding your application&apos;s database.</span><br><span class="line">|</span><br><span class="line">*/</span><br><span class="line"></span><br><span class="line">$factory-&gt;define(App\Models\User::class, function (Faker $faker) &#123;</span><br><span class="line">    $date_time = $faker-&gt;date . &apos; &apos; . $faker-&gt;time;</span><br><span class="line">    static $password;</span><br><span class="line"></span><br><span class="line">    return [</span><br><span class="line">        &apos;name&apos; =&gt; $faker-&gt;name,</span><br><span class="line">        &apos;email&apos; =&gt; $faker-&gt;safeEmail,</span><br><span class="line">        &apos;password&apos; =&gt; $password ?: $password = bcrypt(&apos;secret&apos;),</span><br><span class="line">        &apos;remember_token&apos; =&gt; str_random(10),</span><br><span class="line">        &apos;created_at&apos; =&gt; $date_time,</span><br><span class="line">        &apos;updated_at&apos; =&gt; $date_time,</span><br><span class="line">    ];</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>define 定义一个指定的数据模型User的模型工厂。define方法接受两个参数，第一个参数为指定的Eloquent的模型类，第二个参数为一个闭包函数，该闭包函数接收一个Faker PHP函数库的实例，让我们可以在函数内部使用Faker方法来生成假数据并为模型的指定字段赋值。</p><p>###数据填充<br>我们使用Seeder类来给数据填充测试数据。所有的Seeder类都放在database/seeds目录下，文件名需要按照驼峰式来命名，且严格遵守大小鞋规范。laravel默认为我们定了一个DatabaseSeeder类，我们可以在该类中使用call方法来运行其他的Seeder类，以此控制数据填充的顺序。我们可以使用下面命令生成一个UserTableSeeder文件用于填充用户假数据。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php artisan make:seeder UserTableSeeder</span><br></pre></td></tr></table></figure><p>现在让我们使用该方法来创建50个假用户。<br>database/seeds/UsersTableSeeder.php</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">use Illuminate\Database\Seeder;</span><br><span class="line">use App\Models\User;</span><br><span class="line"></span><br><span class="line">class UsersTableSeeder extends Seeder</span><br><span class="line">&#123;</span><br><span class="line">    /**</span><br><span class="line">     * Run the database seeds.</span><br><span class="line">     *</span><br><span class="line">     * @return void</span><br><span class="line">     */</span><br><span class="line">    public function run()</span><br><span class="line">    &#123;</span><br><span class="line">        $users = factory(User::class)-&gt;times(50)-&gt;make();</span><br><span class="line">        User::insert($users-&gt;makeVisible([&apos;password&apos;, &apos;remember_token&apos;])-&gt;toArray());</span><br><span class="line"></span><br><span class="line">        $user = User::find(1);</span><br><span class="line">        $user-&gt;name = &apos;feng&apos;;</span><br><span class="line">        $user-&gt;email = &apos;feng@qq.com&apos;;</span><br><span class="line">        $user-&gt;password = bcrypt(&apos;password&apos;);</span><br><span class="line">        $user-&gt;save();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>times 接收一个参数用指定要创建的模型数量，make方法调用后将为模型创建一个集合。makeVisible方法临时显示User模型里指定的隐藏的属性$hidden，接着我们使用insert 方法将生成假用户数据插入到数据库中，最后我们还对第一个用户信息进行了更新，用于登陆此账号。</p><p>接下来我们需要调用DatabaseSeeder 中调用call方法来指定我们要运行假数据填充文件。</p><p>database/seeds/DatabaseSeeder.php</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">use Illuminate\Database\Seeder;</span><br><span class="line">use Illuminate\Database\Eloquent\Model;</span><br><span class="line"></span><br><span class="line">class DatabaseSeeder extends Seeder</span><br><span class="line">&#123;</span><br><span class="line">    /**</span><br><span class="line">     * Run the database seeds.</span><br><span class="line">     *</span><br><span class="line">     * @return void</span><br><span class="line">     */</span><br><span class="line">    public function run()</span><br><span class="line">    &#123;</span><br><span class="line">        Model::unguard();</span><br><span class="line"></span><br><span class="line">        $this-&gt;call(UsersTableSeeder::class);</span><br><span class="line"></span><br><span class="line">        Model::reguard();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在运行生成假数据命令之前，我们需要使用migrate:refresh命令来重置数据库，之后再使用db:seed执行数据填充。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">php artisan migrate:refresh</span><br><span class="line">php artisan db:seed</span><br></pre></td></tr></table></figure><p>如果我们单独指定执行UserTableSeeder数据库填充文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">php artisan migrate:refresh</span><br><span class="line">php artisan db:seed --class=UserTableSeeder</span><br></pre></td></tr></table></figure><p>也可以使用下面一条命令来同时完成数据库的重置和填充操作：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php artisan migrate:refresh --seed</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在实际的项目开发过程中，我们经常会用到一些假数据来对数据库进行填充以方便调试程序，原始的做法是手工一个个在数据库中创建，或者从队友的机器那导出数据填充到开发机器中。Laravel 提供了一套更加现代化、非常简单易用的数据填充方案。&lt;br&gt;1、对要生成假数据的模型指定字段进行
      
    
    </summary>
    
    
      <category term="laravel" scheme="https://sunxiaofeng123.github.io/tags/laravel/"/>
    
  </entry>
  
  <entry>
    <title>PHP设计模式之抽象工厂模式</title>
    <link href="https://sunxiaofeng123.github.io/2018/07/01/hello-world/"/>
    <id>https://sunxiaofeng123.github.io/2018/07/01/hello-world/</id>
    <published>2018-07-01T01:33:16.000Z</published>
    <updated>2018-07-02T06:53:06.000Z</updated>
    
    <content type="html"><![CDATA[<p>在不指定具体类的情况下创建一系列相关或依赖对象。 通常创建的类都实现相同的接口。 抽象工厂的客户并不关心这些对象是如何创建的，它只是知道它们是如何一起运行的。</p><h2 id="代码展示"><a href="#代码展示" class="headerlink" title="代码展示"></a>代码展示</h2><h3 id="AbstractFactory-php"><a href="#AbstractFactory-php" class="headerlink" title="AbstractFactory.php"></a>AbstractFactory.php</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">namespace DesignPatters\Creational\AbstruactFactory;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 在这种情况下，抽象工厂是创建一些组件的契约</span><br><span class="line"> * 在web中， 有两种呈现文本的方式： HTML和JSON</span><br><span class="line"> /</span><br><span class="line"></span><br><span class="line"> abstract class AbstractFactory</span><br><span class="line"> &#123;</span><br><span class="line"> abstract public function cteateText(string $content): Text;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h3 id="JsonFacory-php"><a href="#JsonFacory-php" class="headerlink" title="JsonFacory.php"></a>JsonFacory.php</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">namespace DesignPatterns\Creational\AbstractFactory;</span><br><span class="line"></span><br><span class="line">class JsonFactory extends AbstractFactory</span><br><span class="line">&#123;</span><br><span class="line">public function create(string $content):Text</span><br><span class="line">&#123;</span><br><span class="line">return new JsonText($content)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="HtmlFactory-php"><a href="#HtmlFactory-php" class="headerlink" title="HtmlFactory.php"></a>HtmlFactory.php</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">namespace DesignPatterns\Creational\AbstractFactory;</span><br><span class="line"></span><br><span class="line">class HtmlFactory extends AbstractFaxtory</span><br><span class="line">&#123;</span><br><span class="line">public function cteateText(string $content): Text</span><br><span class="line">&#123;</span><br><span class="line">return new HtmlText($content);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Text-php"><a href="#Text-php" class="headerlink" title="Text.php"></a>Text.php</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">namespace DesignPatterns\Creational\AbstractFactory;</span><br><span class="line"></span><br><span class="line">abstract class Text</span><br><span class="line">&#123;</span><br><span class="line">/**</span><br><span class="line">  *@var string</span><br><span class="line">  *</span><br><span class="line">  /</span><br><span class="line"></span><br><span class="line">  private $text;</span><br><span class="line"></span><br><span class="line">  public function __construct(string $text)</span><br><span class="line">  &#123;</span><br><span class="line">  $this-&gt;text = $text;</span><br><span class="line">  &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="JsonText-php"><a href="#JsonText-php" class="headerlink" title="JsonText.php"></a>JsonText.php</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">namespace DesignPatterns\Creational\AbstractFactory;</span><br><span class="line"></span><br><span class="line">class JsonText extends Text</span><br><span class="line">&#123;</span><br><span class="line">//你的逻辑代码</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="HtmlText-php"><a href="#HtmlText-php" class="headerlink" title="HtmlText.php"></a>HtmlText.php</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">namespace DesignPatterns\Creational\AbstractFactory;</span><br><span class="line"></span><br><span class="line">class HtmlText extends Text</span><br><span class="line">&#123;</span><br><span class="line">//你的逻辑代码</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Tests-AbstractFactoryTest-php"><a href="#Tests-AbstractFactoryTest-php" class="headerlink" title="Tests\AbstractFactoryTest.php"></a>Tests\AbstractFactoryTest.php</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">namespace DesignPatterns\Creational\AbstractFactory\Tests;</span><br><span class="line"></span><br><span class="line">use DesignPatterns\Creational\AbstractFactory\HtmlFactory;</span><br><span class="line">use DesignPatterns\Creational\AbstractFactory\HtmlText;</span><br><span class="line">use DesignPatterns\Creational\AbstractFactory\JsonFactory;</span><br><span class="line">use DesignPatterns\Creational\AbstractFactory\JsonText;</span><br><span class="line">use PHPUnit\Framework\TestCase;</span><br><span class="line"></span><br><span class="line">class AbstractFactoryTest extend TestCase</span><br><span class="line">&#123;</span><br><span class="line">public function testCanCreateHtmlText()</span><br><span class="line">&#123;</span><br><span class="line">$factory = new HtmlFactory();</span><br><span class="line">$text = $factory-&gt;createText(&apos;foobar&apos;);</span><br><span class="line"></span><br><span class="line">$this-&gt;assertInstanceOf(HtmlText::class, $text);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public function testCanCreateJsonText()</span><br><span class="line">&#123;</span><br><span class="line">$factory = new JsonFactory();</span><br><span class="line">$texgt = $factory-&gt;cteateText(&apos;foorbar&apos;);</span><br><span class="line"></span><br><span class="line">$this-&gt;assertInstanceOf(JsonText::class, $text);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>内容转自laravel-china 社区。<br>更多内容: <a href="https://laravel-china.org/docs/php-design-patterns/2018/AbstractFactory/1487" target="_blank" rel="noopener">laravel-china</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在不指定具体类的情况下创建一系列相关或依赖对象。 通常创建的类都实现相同的接口。 抽象工厂的客户并不关心这些对象是如何创建的，它只是知道它们是如何一起运行的。&lt;/p&gt;
&lt;h2 id=&quot;代码展示&quot;&gt;&lt;a href=&quot;#代码展示&quot; class=&quot;headerlink&quot; titl
      
    
    </summary>
    
    
      <category term="php" scheme="https://sunxiaofeng123.github.io/tags/php/"/>
    
  </entry>
  
  <entry>
    <title>github+hexo搭建静态博客心得</title>
    <link href="https://sunxiaofeng123.github.io/2018/06/28/hello-myblog/"/>
    <id>https://sunxiaofeng123.github.io/2018/06/28/hello-myblog/</id>
    <published>2018-06-28T01:33:16.000Z</published>
    <updated>2018-07-01T07:39:27.000Z</updated>
    
    <content type="html"><![CDATA[<p>一直想搭建一个属于自己的博客，一直没有时间，后来听朋友说使用github+hexo搭建一个静态博客，效果很好，正好自己也一直在用github。昨天正式开始搭建，现在只是把博客的基本架构搭建完成，以后每天慢慢完善，顺便写一些学习到技术的心得，共同学习进步，也提升一下自己写作能力。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;一直想搭建一个属于自己的博客，一直没有时间，后来听朋友说使用github+hexo搭建一个静态博客，效果很好，正好自己也一直在用github。昨天正式开始搭建，现在只是把博客的基本架构搭建完成，以后每天慢慢完善，顺便写一些学习到技术的心得，共同学习进步，也提升一下自己写作能
      
    
    </summary>
    
    
      <category term="博客" scheme="https://sunxiaofeng123.github.io/tags/%E5%8D%9A%E5%AE%A2/"/>
    
  </entry>
  
</feed>
